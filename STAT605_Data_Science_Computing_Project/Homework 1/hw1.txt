Yuanyou Yao yyao93@wisc.edu





baby.t.test = function(x, mu=0, conf.level=.95) {
    stopifnot(length(x) >= 2)
    stopifnot((0 < conf.level) & (conf.level < 1))
    n = length(x)
    x.bar = mean(x)
    s.x = sd(x)
    t = (x.bar - mu) / (s.x / sqrt(n))
    return.list = list() # set up return.list as return value
    return.list$statistic = t
    return.list$parameter = n - 1
    return.list$p.value = 2*pt(q=-abs(t), df=n-1)
    alpha = 1 - conf.level
    t.for.conf.level = -qt(p=alpha/2, df=n-1)
    error.margin = t.for.conf.level * s.x / sqrt(n)
    return.list$conf.int = c(x.bar - error.margin, x.bar + error.margin)
    return.list$estimate = x.bar
    return.list$null.value = mu
    return(return.list)
}


## test case
baby.t = baby.t.test(1:10, 5, .90)
print(str(baby.t))
t = t.test(x=1:10, mu=5, conf.level=.90) # Call real t.test() to check mine.


## Note: as.numeric(), below, removes names from components of t
stopifnot(baby.t$statistic == as.numeric(t$statistic))
stopifnot(baby.t$parameter == as.numeric(t$parameter))
stopifnot(baby.t$p.value == as.numeric(t$p.value))
## (The next test, and really all of these, should use all.equal()
## rather than "==" to avoid checking floating-point numbers for
## equality. We may correct this later after learning regular
## expressions.)
##stopifnot(baby.t$conf.int == as.numeric(t$conf.int))
stopifnot(baby.t$estimate == as.numeric(t$estimate))
stopifnot(baby.t$null.value == as.numeric(t$null.value))


1    Four score and seven years ago our fathers brought forth on this
2    continent, a new nation, conceived in Liberty, and dedicated to the
3    proposition that all men are created equal.
4    Now we are engaged in a great civil war, testing whether that nation,
5    or any nation so conceived and so dedicated, can long endure. We are
6    met on a great battle-field of that war. We have come to dedicate a
7    portion of that field, as a final resting place for those who here
8    gave their lives that that nation might live. It is altogether fitting
9    and proper that we should do this.


1    Four score and seven years ago our fathers brought forth on this
2    continent, a new nation, conceived in Liberty, and dedicated to the
3    proposition that all men are created equal.
4    Now we are engaged in a great civil war, testing whether that nation,
5    or any nation so conceived and so dedicated, can long endure. We are
6    met on a great battle-field of that war. We have come to dedicate a
7    portion of that field, as a final resting place for those who here
8    gave their lives that that nation might live. It is altogether fitting
9    and proper that we should do this.


int x = 10;
int y = 20;
int z = x + y;
printf("%d + %d = %d\n", x, y, z);
float approx_pi = 3.1415;
printf("pi is  equal to %f\n", approx_pi);


 most typical formula for editing in vim is to combine an operator (e.g., {\tt d}, {\tt x} or {\tt y}) with a motion (i.e., specifying a location, such as  next beginning of a word or  end of  current line). We saw  {\tt dd} command in lecture, but  {\tt d} command has a lot more options available. For example, we can write {\tt dw} to delete from  cursor to  next start of a word, or {\tt d\^} to delete from  cursor to  beginning of  line. An especially useful command is  {\tt daw} command. It deletes  current word under  cursor (it's easy to remember-- {\tt daw} stands for ``delete a word''). Use  {\tt daw} command to delete  word {\tt approximately} from  last line of \verb|semicolons.c|.

Emacs has SMTP, which means that it can send and receive emails. After completing some configuritions, emacs are very powerful to edit email, add attachments and signitures.


Use emacs to send an email.


Vim can edit files from remote servers. We can use the command $vim scp://user@server.com/filepath. Besides, Vim also supports FTP, SFTP, HTTP(read only), rsync.


Ues Vim to edit file on statistics server.